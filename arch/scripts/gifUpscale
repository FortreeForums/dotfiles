#!/bin/bash

# upscale & convert gifs to use as a wallpaper
# written by vortex !NOiDx.cCl2
# optional dependencies: feh, mpv

## variables {{
TMP="${HOME}/.cache/pixel"
SRC="$1"
EXT="$2"
DEPS=(
      "ffmpeg"
      "convert"
      )
## }}

## extract the frames {{
extract() {
  convert -coalesce ${SRC} ./extract_%05d.png
}
## }}

## get OS information {{
getOS() {
  os="$(tr -s ' \011' '\012' < /etc/issue | head -n 1)"
  case $os in
   Ubuntu*|Debian* ) sudo apt-get install ffmpeg imagemagick;;
   Fedora*|CentOS* ) sudo yum install ffmpeg imagemagick;;
             Arch* ) sudo pacman -S ffmpeg imagemagick;;
             Mint* ) sudo add-apt-repository ppa:jon-severinsson/ffmpeg &&
                     sudo apt-get update &&
		     sudo apt-get install ffmpeg imagemagick;;
	 OpenSUSE* ) sudo zypper in ffmpeg imagemagick;;
	   Gentoo* ) emerge -pv ffmpeg imagemagick &&
	             emerge ffmpeg imagemagick;;
   esac
}
## }}

## determine ram size {{
getRAM() {
  ram=$(grep MemTotal /proc/meminfo | \
        awk '{$2=$2/1024**2;} 1 {printf("%.0f %.0f""\n"), $1, $2;}')
  ram="${ram/0 }"
  # store this figure so magnify() doesnt starve the system of ram later
  n=$(echo "${ram}*2.5" | bc | cut -d "." -f1)
}

getRAM
## }}

## get monitor dimensions {{
getDimensions() {
  WIDTH="$(xrandr --current | grep '*' | uniq | awk '{print $1}')"
}

getDimensions
## }}

## magnify the frames {{
magnify() {
printf "Magnifying Frames... ["
while [ "$(find . -maxdepth 1 -name 'extract*' | wc -l)" -ge 1 ]; do
  for f in "$(find . -maxdepth 1 -name 'extract*' | sort -n | head -${n})"; do
    printf "#"
    convert -magnify -magnify $f ./magnify_${num}%04d.png
    # increment $num each run to stop overwriting batch of 50 frames
    num="$(expr $num + 1)"
    rm $f
    sleep 2
  done
done
printf "] done!\n"
}
## }}

## resize the frames {{
resize() {
  mogrify -resize "${WIDTH}" ./magnify_*.png
}
## }}

## merge the frames {{
merge() {
  if [[ "${EXT,,}" == "gif" ]]; then
    ffmpeg -pattern_type glob -i '*.png' output.gif
  elif [[ "${EXT,,}" =~ ^(mp4|mkv|avi)$ ]]; then
    ffmpeg -framerate 30 -pattern_type glob -i '*.png' -c:v libx264 -r 30 \
    output.${EXT,,}
  elif [[ "${EXT,,}" == "webm" ]]; then
    ffmpeg -framerate 30 -pattern_type glob -i '*.png' -c:v libvpx-vp9 -crf 30 \
    -b:v 0 output.webm
  fi

  cp output.${EXT,,} ${HOME}
}
## }}

## set output as wallpaper {{
changeWallpaper() {
  if [[ "${EXT,,}" == "gif" ]]; then
    feh --bg-scale ${HOME}/output.gif
  elif [[ "${EXT,,}" =~ ^(mp4|mkv|avi|webm)$ ]]; then
    # https://github.com/MitchWeaver/bin/blob/master/mpvbg
    pkill -9 xwinwrap
    xwin="xwinwrap -ni -b -nf -ov -g ${WIDTH} -- "
    mpv="mpv --wid WID --no-config --keepaspect=no --loop \
         --no-border --vd-lavc-fast --x11-bypass-compositor=no \
	 --gapless-audio=yes --vo=xv --hwdec=auto --really-quiet \
	 --name=mpvbg --geometry=${WIDTH}+0+0"

    $xwin $mpv "${HOME}/output.${EXT,,}" 2>&1 &
    echo -n $! > ${HOME}/.cache/mpvbg.pid
  fi
}
## }}

## show help dialogue if $1 null {{
while [ $# -eq 0 ]; do
  echo -e "  No argument supplied.
  Example: gifUpscale /path/to/image webm -s
  -s | --set-wallpaper to set output as background."
  exit
done
## }}

## throw an error and kill the script if $1 is a relative path {{
if [[ ! "${SRC:0:1}" = / ]];  then
  echo "Please use an absolute path such as /path/to/image."
  exit
fi
## }}

## throw an error kill the script if filetype is unsupported {{
if [[ ! "${EXT,,}" =~ ^(gif|mp4|mkv|avi|webm)$ ]]; then
  echo -e "Unsupported filetype."
  echo -e "Supported filetypes: gif, mp4, mkv, avi, webm."
  exit
fi
## }}

## check if ffmpeg & imagemagick are installed {{
for d in "${DEPS[@]}"; do
  command -v $d >/dev/null 2>&1 || {
    echo >&2 "Packages ${DEPS[@]}" are required, but not installed.;
    read -rp "Do you want to install them now? " DEPS_YN
    case $DEPS_YN in
     [yY]* ) getOS || exit 1; break;;
     [nN]* ) echo "Chose not to install. Terminating."; exit;;
	 * ) echo -e "Please answer yes or no.\n";
    esac
  }
done
## }}

## create $TMP if it doesnt exist, otherwise empty the folder {{
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
## }}

## now run the script {{
cd ${TMP}

echo -e "Extracting frames..." && extract || exit 1
magnify || exit 1
echo -e "Resizing frames to ${WIDTH}..." && resize || exit 1
echo -e "Merging frames..." && merge >/dev/null 2>&1 || exit 1
echo -e "Merge finished! The output file is in your ${HOME}."

rm -rf ${TMP}
## }}

## prompt user to set output as wallpaper {{
while [ ! $# -eq 0 ]; do
  case $3 in
    -s|--set-wallpaper) changeWallpaper || exit 1; exit;;
		     *) exit;;
  esac
done
## }}
